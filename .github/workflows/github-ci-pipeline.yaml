name: Build Targets and Run All Tests

# Here I use action's triggers 'push' and 'pull_request'.
# The strategy is the following: this action will be
# triggered on any push to 'main' branch and any pull
# request to any branch. Thus we avoid duplicate work-
# flows.
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      # Live debug failures using tmate by toggling input parameter
      # 'debug_enabled':
      # https://github.com/mxschmitt/action-tmate#manually-triggered-debug
      # When manually running this workflow:
      # https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
      debug_enabled:
        description: 'Enable tmate debugging'
        type: boolean
        default: false

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          # TODO(arc1): add support for macOS and Windows.
          # - os: macos-latest
          # - os: windows-latest

    steps:
      # Checkout the repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Install ninja-build
        run: sudo apt-get install -y ninja-build

      # - name: Build and push Docker image
      #   uses: mr-smithers-excellent/docker-build-push@v6
      #   with:
      #     image: arthurbandaryk/hello-world-tasks
      #     registry: docker.io
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Simple hello using GNU
      #   run: |
      #     mkdir -p build && \
      #     cmake -G Ninja -S 01-homework-hello/01-1-simple-hello -B build/ && \
      #     cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/ && \
      #     ./bin/install/simple-hello

      # - name: Simple hello using clang
      #   run: |
      #     rm -rf build/* && \
      #     CXX=clang++ cmake -G Ninja -S 01-homework-hello/01-1-simple-hello -B build/ && \
      #     CXX=clang++ cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/ && \
      #     ./bin/install/simple-hello

      # - name: Hello lib using GNU
      #   run: |
      #     rm -rf build/* && \
      #     cmake -G Ninja -S 01-homework-hello/01-2-hello-libs -B build/ && \
      #     cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/hello-bin-with-static-and-shared && \
      #     ./bin/install/hello-bin-static && ./bin/install/hello-bin-dynamic

      # - name: Hello lib using clang
      #   run: |
      #     rm -rf build/* && \
      #     CXX=clang++ cmake -G Ninja -S 01-homework-hello/01-2-hello-libs -B build/ && \
      #     CXX=clang++ cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/hello-bin-with-static-and-shared && \
      #     ./bin/install/hello-bin-static && ./bin/install/hello-bin-dynamic

      # - name: Static SDL using GNU
      #   run: |
      #     rm -rf build/* && \
      #     cmake -G Ninja -DBUILD_SDL_STATIC=ON -S 02-homework-sdl-lib -B build/ && \
      #     cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/ -R .*exit.code.* && \
      #     ./bin/install/sdl-bin-static

      # - name: Static SDL using clang
      #   run: |
      #     rm -rf build/* && \
      #     CXX=clang++ cmake -G Ninja -DBUILD_SDL_STATIC=ON -S 02-homework-sdl-lib -B build/ && \
      #     CXX=clang++ cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/ -R .*exit.code.* && \
      #     ./bin/install/sdl-bin-static

      # - name: Dynamic SDL using GNU
      #   run: |
      #     rm -rf build/* && \
      #     cmake -G Ninja -S 02-homework-sdl-lib -B build/ && \
      #     cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/ -R .*exit.code.* && \
      #     ./bin/install/sdl-bin-shared

      # - name: Dynamic SDL using clang
      #   run: |
      #     rm -rf build/* && \
      #     CXX=clang++ cmake -G Ninja -S 02-homework-sdl-lib -B build/ && \
      #     CXX=clang++ cmake --build build/ && \
      #     cmake --install build/ && \
      #     ctest --test-dir build/ -R .*exit.code.* && \
      #     ./bin/install/sdl-bin-shared

      - name: Simple sdl loop using GNU
        run: |
          mkdir -p build && \
          cmake -G Ninja -S 03-homework-sdl-loop/sdl-simple-loop -B build/ && \
          cmake --build build/

      - name: Simple sdl loop using clang
        run: |
          rm -rf build/* && \
          CXX=clang++ cmake -G Ninja -S 03-homework-sdl-loop/sdl-simple-loop -B build/ && \
          CXX=clang++ cmake --build build/

      - name: Debug using tmate (if failure)
        uses: mxschmitt/action-tmate@v3
        # Optionally enable tmate debugging if the workflow was manually-triggered
        # with `debug_enabled` set to `true`.
        # https://github.com/mxschmitt/action-tmate#manually-triggered-debug
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
    